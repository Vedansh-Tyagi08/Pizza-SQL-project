-- Q1. Retrieve the total number of orders placed.

SELECT COUNT(order_id)
FROM orders;

----------------------------------------------------------------------------------------------

-- Q2. Calculate the total revenue generated from pizza sales.

SELECT ROUND(SUM(total_sales)::numeric,2)
FROM (
		SELECT *,(quantity*price) AS total_sales
		FROM order_details AS od
		INNER JOIN pizzas AS p
		ON od.pizza_id = p.pizza_id
     );

----------------------------------------------------------------------------------------------

-- Q3. Identify the highest-priced pizza.

SELECT pt.name, p.price
FROM pizzas AS p
INNER JOIN pizza_types AS pt
ON p.pizza_type = pt.pizza_type_id
ORDER BY price DESC
LIMIT 1;

----------------------------------------------------------------------------------------------

-- Q4. Identify the most common pizza size ordered.

SELECT p.size, COUNT(od.*) AS order_count
FROM pizzas AS p
INNER JOIN order_details AS od
ON p.pizza_id = od.pizza_id
GROUP BY p.size
ORDER BY COUNT(od.*) DESC;

----------------------------------------------------------------------------------------------

-- Q5. List the top 5 most ordered pizza types along with their quantities.

WITH cte AS
(
	SELECT p.pizza_type, SUM(od.quantity) AS total_quantity
	FROM pizzas AS p
	INNER JOIN order_details AS od
	ON p.pizza_id = od.pizza_id
	GROUP BY p.pizza_type
	ORDER BY total_quantity DESC
	LIMIT 5
)
SELECT pt.name, cte.total_quantity
FROM pizza_types AS pt
JOIN cte
ON pt.pizza_type_id = cte.pizza_type
ORDER BY total_quantity DESC;

----------------------------------------------------------------------------------------------

-- Q6. Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT pt.category, SUM(od.quantity) AS total_quantity
FROM order_details AS od
	INNER JOIN pizzas AS p
	ON od.pizza_id = p.pizza_id
		INNER JOIN pizza_types AS pt
		ON p.pizza_type = pt.pizza_type_id
GROUP BY pt.category
ORDER BY total_quantity DESC;

----------------------------------------------------------------------------------------------

-- Q7. Determine the distribution of orders by hour of the day.

SELECT EXTRACT(hour FROM time) AS hour, COUNT(order_id) AS total_orders
FROM orders
GROUP BY EXTRACT(hour FROM time)
ORDER BY total_orders DESC;

----------------------------------------------------------------------------------------------

-- Q8. Join relevant tables to find the category-wise distribution of pizzas.

SELECT pt.category, p.*
FROM pizza_types AS pt
INNER JOIN pizzas as p
ON pt.pizza_type_id = p.pizza_type;
                            ---------  OR  ---------
SELECT category, COUNT(name)
FROM pizza_types
GROUP BY category;

----------------------------------------------------------------------------------------------

-- Q9. Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT ROUND(AVG(total_pizzas_per_day),0) AS average_pizzas_per_day
FROM (
		SELECT o.date, SUM(od.quantity) AS total_pizzas_per_day
		FROM orders AS o
		INNER JOIN order_details AS od
		ON o.order_id = od.order_id::varchar
		GROUP BY o.date
		ORDER BY o.date
     );

----------------------------------------------------------------------------------------------

-- Q10. Determine the top 3 most ordered pizza types based on revenue.

SELECT pt.name, SUM(od.quantity*p.price) AS total_revenue
FROM pizzas AS p
INNER JOIN order_details AS od
ON p.pizza_id = od.pizza_id
	INNER JOIN pizza_types AS pt
	ON p.pizza_type = pt.pizza_type_id
GROUP BY pt.name
ORDER BY total_revenue DESC
LIMIT 3;

---------------------------------------------------------------------------------------------

-- Q11. Calculate the percentage contribution of each pizza type to total revenue.

WITH cte AS(
		SELECT SUM(od.quantity*p.price)::numeric AS total_revenue
		FROM order_details AS od
		INNER JOIN pizzas AS p
		ON od.pizza_id = p.pizza_id
           )												  
SELECT pt.category, (ROUND(SUM(od.quantity*p.price)::numeric / ( SELECT total_revenue FROM cte
								                                                ),4))* 100
								                                              AS revenue_percent_per_category
FROM order_details AS od
INNER JOIN pizzas AS p
ON od.pizza_id = p.pizza_id
	INNER JOIN pizza_types AS pt
	ON p.pizza_type = pt.pizza_type_id
GROUP BY pt.category
ORDER BY revenue_percent_per_category DESC;

---------------------------------------------------------------------------------------------

-- Q12. Analyze the cumulative revenue generated over time.

SELECT date,
ROUND( SUM(revenue) OVER(order by date ASC)::numeric,2 ) AS cumulative_revenue
FROM(
	SELECT o.date, SUM(od.quantity * p.price) AS revenue
	FROM pizzas AS p
	INNER JOIN order_details AS od
	ON p.pizza_id = od.pizza_id
		INNER JOIN orders AS o
		ON od.order_id = o.order_id::numeric
	GROUP BY o.date
	ORDER BY o.date ASC
    );
---------------------------------------------------------------------------------------------

-- Q13. Determine top 3 most ordered pizza types based on revenue for each pizza category.

WITH cte AS
(
	SELECT category, name,revenue,
	        ROW_NUMBER() OVER(PARTITION BY category ORDER BY revenue DESC) AS rn
	FROM (
		SELECT pt.category, pt.name, SUM(p.price * od.quantity) AS revenue
		FROM order_details AS od
		INNER JOIN pizzas AS p
		ON od.pizza_id = p.pizza_id
			INNER JOIN pizza_types AS pt
			ON p.pizza_type  = pt.pizza_type_id
		GROUP BY pt.category, pt.name
		ORDER BY pt.category ASC, revenue DESC
	     )
)
SELECT * FROM cte
WHERE rn <= 3;
